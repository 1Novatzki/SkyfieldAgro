# -*- coding: utf-8 -*-
"""C√≥pia de Conhe√ßa o Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFrA_B-6hjMTTdfslgUiFWEZG1o8syoH
"""

import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
from datetime import date, timedelta

# Fun√ß√£o para coletar e exibir informa√ß√µes do clima
def obter_informacoes(cidade):
    url = f"https://www.tempo.com/{cidade}.htm"
    headers = {"User  -Agent": "Mozilla/5.0"}
    soup = BeautifulSoup(requests.get(url, headers=headers).text, "html.parser")

    # 2) Temperatura de hoje (Dia 1)
    temp_atual = soup.find("span", class_="dato-temperatura changeUnitT").text.strip()
    sensacao = soup.find("span", class_="sensacion changeUnitT").text.strip()
    print(f"{cidade.capitalize()} - Dia 1 (hoje): M√°x {temp_atual} / Sensa√ß√£o {sensacao}")

    # 3) Previs√µes dos pr√≥ximos dias (<span class="temp">)
    previsoes = soup.find_all("span", class_="temp")

    # Dia 2
    max2 = previsoes[1].find("span", class_="max changeUnitT").text.strip()
    min2 = previsoes[1].find("span", class_="min changeUnitT").text.strip()
    print(f"Dia 2: M√°x {max2} / M√≠n {min2}")

    # Dia 3
    max3 = previsoes[2].find("span", class_="max changeUnitT").text.strip()
    min3 = previsoes[2].find("span", class_="min changeUnitT").text.strip()
    print(f"Dia 3: M√°x {max3} / M√≠n {min3}")

    # Dia 4
    max4 = previsoes[3].find("span", class_="max changeUnitT").text.strip()
    min4 = previsoes[3].find("span", class_="min changeUnitT").text.strip()
    print(f"Dia 4: M√°x {max4} / M√≠n {min4}")

    # Dia 5
    max5 = previsoes[4].find("span", class_="max changeUnitT").text.strip()
    min5 = previsoes[4].find("span", class_="min changeUnitT").text.strip()
    print(f"Dia 5: M√°x {max5} / M√≠n {min5}")

    # Dia 6
    max6 = previsoes[5].find("span", class_="max changeUnitT").text.strip()
    min6 = previsoes[5].find("span", class_="min changeUnitT").text.strip()
    print(f"Dia 6: M√°x {max6} / M√≠n {min6}")

    # Dia 7
    max7 = previsoes[6].find("span", class_="max changeUnitT").text.strip()
    min7 = previsoes[6].find("span", class_="min changeUnitT").text.strip()
    print(f"Dia 7: M√°x {max7} / M√≠n {min7}")

    return temp_atual, [max2, max3, max4, max5, max6, max7], [min2, min3, min4, min5, min6, min7]

# Fun√ß√£o para analisar culturas
def analisar_culturas(cidade, max_vals, min_vals, temp_atual):
    culturas = {
        "milho": (25, 30),
        "soja": (20, 30),
        "cevada": (4, 15),
        "feijao": (17, 28),
        "batata": (7, 20),
        "aveia": (7, 15),
        "trigo": (5, 20)
    }

    # Monta listas de valores inteiros
    max_vals_int = [int(x.replace("¬∞", "")) for x in [temp_atual] + max_vals]
    min_vals_int = [int(x.replace("¬∞", "")) for x in [temp_atual] + min_vals]

    for cultura, (minimo, maximo) in culturas.items():
        print(f"\nüå± {cultura.capitalize()} ({minimo}¬∞‚Äì{maximo}¬∞C)")
        propicios = 0

        # An√°lise dia a dia
        # Dia 1 (Hoje)
        mn = min_vals_int[0]
        mx = max_vals_int[0]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 1: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # Dia 2
        mn = min_vals_int[1]
        mx = max_vals_int[1]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 2: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # Dia 3
        mn = min_vals_int[2]
        mx = max_vals_int[2]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 3: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # Dia 4
        mn = min_vals_int[3]
        mx = max_vals_int[3]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 4: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # Dia 5
        mn = min_vals_int[4]
        mx = max_vals_int[4]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 5: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # Dia 6
        mn = min_vals_int[5]
        mx = max_vals_int[5]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 6: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # Dia 7
        mn = min_vals_int[6]
        mx = max_vals_int[6]
        status = "Prop√≠cio" if (mn >= minimo and mx <= maximo) else "N√£o prop√≠cio"
        print(f"  Dia 7: M√°x {mx}¬∞ / M√≠n {mn}¬∞ ‚Üí {status}")
        if status == "Prop√≠cio":
            propicios += 1

        # An√°lise geral
        if propicios == 7:
            geral = "‚úÖ Totalmente prop√≠cio em todos os dias."
        elif propicios >= 4:
            geral = f"‚ö†Ô∏è Parcialmente prop√≠cio ({propicios}/7 dias dentro da faixa)."
        else:
            geral = f"‚ùå Pouco prop√≠cio ({propicios}/7 dias)."
        print(f"  {geral}")

# Coletando informa√ß√µes para Guarapuava
temp_atual_guarapuava, max_vals_guarapuava, min_vals_guarapuava = obter_informacoes("guarapuava")
analisar_culturas("Guarapuava", max_vals_guarapuava, min_vals_guarapuava, temp_atual_guarapuava)

print("\nüîé Coletando dados de Curitiba...\n")
# Coletando informa√ß√µes para Curitiba
temp_atual_curitiba, max_vals_curitiba, min_vals_curitiba = obter_informacoes("curitiba")
analisar_culturas("Curitiba", max_vals_curitiba, min_vals_curitiba, temp_atual_curitiba)

# 5) Gr√°ficos din√¢micos em portugu√™s
weekday_map = {0: "Seg", 1: "Ter", 2: "Qua", 3: "Qui", 4: "Sex", 5: "S√°b", 6: "Dom"}
hoje = date.today()
labels = [weekday_map[(hoje + timedelta(days=i)).weekday()] for i in range(7)]

# Adicionando a temperatura do dia atual para o gr√°fico
max_vals_guarapuava = [temp_atual_guarapuava] + max_vals_guarapuava
min_vals_guarapuava = [temp_atual_guarapuava] + min_vals_guarapuava
max_vals_curitiba = [temp_atual_curitiba] + max_vals_curitiba
min_vals_curitiba = [temp_atual_curitiba] + min_vals_curitiba

# Gr√°fico para Guarapuava
plt.figure()
plt.plot(labels, [int(x.replace("¬∞", "")) for x in max_vals_guarapuava], marker='o', label="M√°xima Guarapuava")
plt.plot(labels, [int(x.replace("¬∞", "")) for x in min_vals_guarapuava], marker='o', label="M√≠nima Guarapuava")
plt.title("Previs√£o de Temperatura: Guarapuava")
plt.xlabel("Dia da semana")
plt.ylabel("Temperatura (¬∞C)")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Gr√°fico para Curitiba
plt.figure()
plt.plot(labels, [int(x.replace("¬∞", "")) for x in max_vals_curitiba], marker='o', label="M√°xima Curitiba")
plt.plot(labels, [int(x.replace("¬∞", "")) for x in min_vals_curitiba], marker='o', label="M√≠nima Curitiba")
plt.title("Previs√£o de Temperatura: Curitiba")
plt.xlabel("Dia da semana")
plt.ylabel("Temperatura (¬∞C)")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()