# -*- coding: utf-8 -*-
"""Cópia de Conheça o Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFrA_B-6hjMTTdfslgUiFWEZG1o8syoH
"""

import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
from datetime import date, timedelta
import csv
import os

# Cidades e URLs
cidades = {
    "Guarapuava": "https://www.tempo.com/guarapuava.htm",
    "Curitiba": "https://www.tempo.com/curitiba.htm"
}

# Faixas ideais de temperatura para cada cultura
culturas = {
    "milho": (25, 30),
    "soja": (20, 30),
    "cevada": (4, 15),
    "feijao": (17, 28),
    "batata": (7, 20),
    "aveia": (7, 15),
    "trigo": (5, 20)
}

recomendacoes = {
    "milho": "Ideal para plantio com temperaturas entre 25°C e 30°C. Evite períodos frios.",
    "soja": "Desenvolvimento ideal entre 20°C e 30°C. Monitorar chuvas na floração.",
    "cevada": "Cultivo favorável entre 4°C e 15°C. Prefere clima frio e seco.",
    "feijao": "Sensível a geadas. Cresce melhor entre 17°C e 28°C.",
    "batata": "Evite calor excessivo. Temperatura ideal entre 7°C e 20°C.",
    "aveia": "Prefere clima frio e úmido entre 7°C e 15°C.",
    "trigo": "Desenvolve-se bem entre 5°C e 20°C. Chuvas no início podem favorecer.",
}

weekday_map = {0: "Seg", 1: "Ter", 2: "Qua", 3: "Qui", 4: "Sex", 5: "Sáb", 6: "Dom"}
hoje = date.today()
dias_labels = [weekday_map[(hoje + timedelta(days=i)).weekday()] for i in range(7)]

# Coleta de temperaturas
def coletar_temperaturas(url):
    headers = {"User-Agent": "Mozilla/5.0"}
    soup = BeautifulSoup(requests.get(url, headers=headers).text, "html.parser")
    try:
        temp_atual = soup.find("span", class_="dato-temperatura changeUnitT").text.strip()
        previsoes = soup.find_all("span", class_="temp")
        max_vals = [int(temp_atual.replace("°", ""))]
        min_vals = [int(temp_atual.replace("°", ""))]

        for i in range(1, 7):
            max_i = previsoes[i].find("span", class_="max changeUnitT").text.strip()
            min_i = previsoes[i].find("span", class_="min changeUnitT").text.strip()
            max_vals.append(int(max_i.replace("°", "")))
            min_vals.append(int(min_i.replace("°", "")))
        return max_vals, min_vals
    except Exception as e:
        print(f"Erro: {e}")
        return None, None

# Análise e geração de CSV
def analisar_e_exportar(cidade, max_vals, min_vals):
    print(f"\n📄 Gerando relatório para {cidade}...")

    nome_arquivo = f"{cidade.lower()}_relatorio.csv"
    with open(nome_arquivo, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["Dia", "Cultura", "Temperatura Máxima", "Temperatura Mínima", "Status", "Recomendação Técnica"])

        for cultura, (minimo, maximo) in culturas.items():
            print(f"\n🌱 {cultura.capitalize()} ({minimo}°–{maximo}°C)")
            propicios = 0
            for i in range(7):
                mn = min_vals[i]
                mx = max_vals[i]
                status = "Propício" if (mn >= minimo and mx <= maximo) else "Não propício"
                if status == "Propício":
                    propicios += 1
                writer.writerow([
                    dias_labels[i],
                    cultura.capitalize(),
                    f"{mx}°C",
                    f"{mn}°C",
                    status,
                    recomendacoes[cultura]
                ])
                print(f"  {dias_labels[i]}: Máx {mx}° / Mín {mn}° → {status}")
            if propicios == 7:
                print("  ✅ Totalmente propício.")
            elif propicios >= 4:
                print(f"  ⚠️ Parcialmente propício ({propicios}/7 dias).")
            else:
                print(f"  ❌ Pouco propício ({propicios}/7 dias).")

    print(f"📁 CSV salvo como: {os.path.abspath(nome_arquivo)}")

# Geração de gráfico
def gerar_grafico(cidade, max_vals, min_vals):
    plt.figure()
    plt.plot(dias_labels, max_vals, marker='o', label="Máxima")
    plt.plot(dias_labels, min_vals, marker='o', label="Mínima")
    plt.title(f"Previsão de Temperatura - {cidade}")
    plt.xlabel("Dia da Semana")
    plt.ylabel("Temperatura (°C)")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.xticks(rotation=45)
    plt.show()

# Execução
for cidade, url in cidades.items():
    print(f"\n🔎 Coletando dados de {cidade}...")
    max_vals, min_vals = coletar_temperaturas(url)
    if max_vals and min_vals:
        gerar_grafico(cidade, max_vals, min_vals)
        analisar_e_exportar(cidade, max_vals, min_vals)